{"version":3,"file":"angular-fire-messaging.js","sources":["../../../src/messaging/base.ts","../../../src/messaging/messaging.ts","../../../src/messaging/messaging.module.ts","../../../src/messaging/angular-fire-messaging.ts"],"names":[],"mappings":"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","sourcesContent":["export const proxyPolyfillCompat = {\n  deleteToken: null,\n  getToken: null,\n  onMessage: null,\n  onBackgroundMessage: null,\n  onTokenRefresh: null,\n  requestPermission: null,\n  setBackgroundMessageHandler: null,\n  useServiceWorker: null,\n  usePublicVapidKey: null,\n};\n","import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport firebase from 'firebase/app';\nimport { concat, EMPTY, Observable, of, throwError, fromEvent } from 'rxjs';\nimport { catchError, defaultIfEmpty, map, mergeMap, observeOn, switchMap, switchMapTo, shareReplay, filter, subscribeOn } from 'rxjs/operators';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfirebaseAppFactory,\n  ɵlazySDKProxy,\n  ɵPromiseProxy,\n  ɵapplyMixins\n} from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport { proxyPolyfillCompat } from './base';\nimport { ɵfetchInstance } from '@angular/fire';\n\nexport const VAPID_KEY = new InjectionToken<string>('angularfire2.messaging.vapid-key');\nexport const SERVICE_WORKER = new InjectionToken<Promise<ServiceWorkerRegistration>>('angularfire2.messaging.service-worker-registeration');\n\n// SEMVER(7): drop\nconst firebaseLTv8 = parseInt(firebase.SDK_VERSION, 10) < 8;\n\nexport interface AngularFireMessaging extends Omit<ɵPromiseProxy<firebase.messaging.Messaging>, 'deleteToken' | 'getToken' | 'requestPermission'> {\n}\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireMessaging {\n\n  public readonly requestPermission: Observable<void>;\n  public readonly getToken: Observable<string | null>;\n  public readonly tokenChanges: Observable<string | null>;\n  public readonly messages: Observable<{}>;\n  public readonly requestToken: Observable<string | null>;\n  public readonly deleteToken: (token: string) => Observable<boolean>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(VAPID_KEY) vapidKey: string|null,\n    @Optional() @Inject(SERVICE_WORKER) _serviceWorker: any,\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n    const serviceWorker: Promise<ServiceWorkerRegistration> | null = _serviceWorker;\n\n    const messaging = of(undefined).pipe(\n      subscribeOn(schedulers.outsideAngular),\n      observeOn(schedulers.insideAngular),\n      switchMap(() => isPlatformServer(platformId) ? EMPTY : import('firebase/messaging')),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      switchMap(app => ɵfetchInstance(`${app.name}.messaging`, 'AngularFireMessaging', app, async () => {\n        const messaging = app.messaging();\n        if (firebaseLTv8) {\n          if (vapidKey) {\n            messaging.usePublicVapidKey(vapidKey);\n          }\n          if (serviceWorker) {\n            messaging.useServiceWorker(await serviceWorker);\n          }\n        }\n        return messaging;\n      }, [vapidKey, serviceWorker])),\n      shareReplay({ bufferSize: 1, refCount: false })\n    );\n\n    this.requestPermission = messaging.pipe(\n      subscribeOn(schedulers.outsideAngular),\n      observeOn(schedulers.insideAngular),\n      // tslint:disable-next-line\n      switchMap(messaging => firebase.messaging.isSupported() ? messaging.requestPermission() : throwError('Not supported.'))\n    );\n\n    this.getToken = messaging.pipe(\n      subscribeOn(schedulers.outsideAngular),\n      observeOn(schedulers.insideAngular),\n      switchMap(async messaging => {\n        if (firebase.messaging.isSupported() && Notification.permission === 'granted') {\n          if (firebaseLTv8) {\n            return await messaging.getToken();\n          } else {\n            const serviceWorkerRegistration = serviceWorker ? await serviceWorker : null;\n            return await messaging.getToken({ vapidKey, serviceWorkerRegistration });\n          }\n        } else {\n          return null;\n        }\n      })\n    );\n\n    const notificationPermission$ = new Observable<string>(emitter => {\n      navigator.permissions.query({ name: 'notifications' }).then(notificationPerm => {\n        notificationPerm.onchange = () => emitter.next();\n      });\n    });\n\n    const tokenChange$ = messaging.pipe(\n      subscribeOn(schedulers.outsideAngular),\n      observeOn(schedulers.insideAngular),\n      switchMapTo(notificationPermission$),\n      switchMapTo(this.getToken)\n    );\n\n    this.tokenChanges = messaging.pipe(\n      subscribeOn(schedulers.outsideAngular),\n      observeOn(schedulers.insideAngular),\n      switchMap(() => firebase.messaging.isSupported() ? concat(this.getToken, tokenChange$) : EMPTY)\n    );\n\n\n    this.messages = messaging.pipe(\n      subscribeOn(schedulers.outsideAngular),\n      observeOn(schedulers.insideAngular),\n      switchMap(messaging => firebase.messaging.isSupported() ? new Observable<string>(emitter =>\n        messaging.onMessage(next => emitter.next(next), err => emitter.error(err), () => emitter.complete())\n      ) : EMPTY),\n    );\n\n    this.requestToken = of(undefined).pipe(\n      subscribeOn(schedulers.outsideAngular),\n      observeOn(schedulers.insideAngular),\n      switchMap(() => this.requestPermission),\n      catchError(() => of(null)),\n      mergeMap(() => this.tokenChanges)\n    );\n\n    // SEMVER(7): drop token\n    this.deleteToken = (token?: string) => messaging.pipe(\n      subscribeOn(schedulers.outsideAngular),\n      observeOn(schedulers.insideAngular),\n      switchMap(messaging => messaging.deleteToken(token || undefined)),\n      defaultIfEmpty(false)\n    );\n\n    return ɵlazySDKProxy(this, messaging, zone);\n  }\n\n}\n\nɵapplyMixins(AngularFireMessaging, [proxyPolyfillCompat]);\n","import { NgModule } from '@angular/core';\nimport { AngularFireMessaging } from './messaging';\n\n@NgModule({\n  providers: [ AngularFireMessaging ]\n})\nexport class AngularFireMessagingModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}